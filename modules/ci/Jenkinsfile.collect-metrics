pipeline {
    agent any

    environment {
        MAVEN_OPTS = "-Dmaven.repo.local=/var/jenkins_home/.m2/repository"
        MAVEN_SETTINGS = '/var/jenkins_home/.m2/settings.xml'
        NEXUS_URL = 'http://nexus:8081/repository/maven-releases'
        MAVEN_CLI_OPTS = '-B -ntp'
        MODULE_PATH = 'modules/collect-metrics'
    }

    parameters {
        string(name: 'DB_URL', defaultValue: 'jdbc:postgresql://postgres:5432/marketflow', description: 'Database URL')
        string(name: 'DB_USER', defaultValue: 'mf_user', description: 'Database user')
        password(name: 'DB_PASS', defaultValue: 'mf_pass', description: 'Database password')
        string(name: 'PLATFORMS', defaultValue: 'yandex,google,vk', description: 'Comma-separated list of platforms')
    }

    stages {
        stage('Clean .m2') {
            steps {
                sh 'rm -rf /var/jenkins_home/.m2/repository/com/marketflow'
            }
        }

        stage('Install Parent POM') {
            steps {
                sh 'mvn clean install -N'
            }
        }

        stage('Run Database Migration') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh """
                        mvn ${MAVEN_CLI_OPTS} liquibase:update \
                            -pl ${MODULE_PATH} \
                            -Dliquibase.changeLogFile=src/main/resources/db/liquibase-config.xml \
                            -Dliquibase.url=${params.DB_URL} \
                            -Dliquibase.username=${params.DB_USER} \
                            -Dliquibase.password=${params.DB_PASS}
                    """
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    sh """
                        mvn ${MAVEN_CLI_OPTS} clean package -pl ${MODULE_PATH} -am
                    """
                }
            }
            post {
                always {
                    junit "**/target/surefire-reports/*.xml"
                }
            }
        }

        stage('Run Code Analysis') {
            steps {
                sh """
                    mvn ${MAVEN_CLI_OPTS} checkstyle:checkstyle pmd:pmd spotbugs:spotbugs \
                        -pl ${MODULE_PATH}
                """
            }
            post {
                always {
                    recordIssues enabledForFailure: true, tool: checkStyle()
                    recordIssues enabledForFailure: true, tool: pmdParser()
                    recordIssues enabledForFailure: true, tool: spotBugs()
                }
            }
        }

        stage('Publish to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh """
                        mvn ${MAVEN_CLI_OPTS} deploy -DskipTests \
                            -pl ${MODULE_PATH} \
                            -DaltDeploymentRepository=nexus-releases::${NEXUS_URL} \
                            -Dnexus.username=${NEXUS_USER} \
                            -Dnexus.password=${NEXUS_PASS} \
                            --settings ${MAVEN_SETTINGS}
                    """
                }
            }
        }

        stage('Execute Collector') {
            steps {
                withEnv([
                    "DB_URL=${params.DB_URL}",
                    "DB_USER=${params.DB_USER}",
                    "DB_PASS=${params.DB_PASS}",
                    "PLATFORMS=${params.PLATFORMS}"
                ]) {
                    sh """
                        java -jar ${MODULE_PATH}/target/collect-metrics-*.jar
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Metrics collector build and execution completed successfully!'
        }
        failure {
            echo 'Metrics collector build or execution failed!'
        }
    }
}